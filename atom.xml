<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ShortyJet.Von's Board]]></title>
  <link href="http://shortyjet-von.github.io/atom.xml" rel="self"/>
  <link href="http://shortyjet-von.github.io/"/>
  <updated>2013-06-08T10:31:26+08:00</updated>
  <id>http://shortyjet-von.github.io/</id>
  <author>
    <name><![CDATA[ShortyJet Von]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于一个shell命令]]></title>
    <link href="http://shortyjet-von.github.io/blog/2013/06/08/guan-yu-%5B%3F%5D-ge-shellming-ling/"/>
    <updated>2013-06-08T09:49:00+08:00</updated>
    <id>http://shortyjet-von.github.io/blog/2013/06/08/guan-yu-[?]-ge-shellming-ling</id>
    <content type="html"><![CDATA[<p>今天有一个哥们问怎么查找当前目录下所有包含某个关键字的文件名，不能重复。心里
咯噔一下，哎呀这个我不会啊。于是上网查，终于找到了解决方法。</p>

<pre><code>grep "#include" `find -type f -name *.c` | cut -d ":" -f1 | uniq
</code></pre>

<p>怕自己以后忘记，所以在此记录下。</p>

<p>===========================================================================</p>

<p>grep命令估计大家都熟悉，不多介绍。但是` 这个符号得介绍下。</p>

<p>` 叫做反引号，又名上分隔符。反引号括起来的字符串被shell解释为命令行，在执行
时，shell首先执行该命令行，并以它的标准输出结果取代整个反引号（包括两个反引
号）部分。
如上面那个shell命令中，` 的作用是将<code>find -type f -name \*.c</code> 的结果当作grep的
参数来使。同样使用xargs也可实现这样的效果。那么上面那个shell命令也等同于：</p>

<pre><code>find -type f -name *.c | xargs grep "#include" | cut -d ":" -f1 | uniq
</code></pre>

<p>还有一个能同样实现该效果的方法是使用bas的$()，使用这个比` 要更容易读。
如下:</p>

<pre><code>grep "#include" $(find -type f -name *.c) | cut -d ":" -f 1 | uniq
</code></pre>

<p>===========================================================================</p>

<p>cut 命令之后补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDL学习日记1:Get Start]]></title>
    <link href="http://shortyjet-von.github.io/blog/2013/06/06/sdlxue-xi-ri-ji-01/"/>
    <updated>2013-06-06T14:34:00+08:00</updated>
    <id>http://shortyjet-von.github.io/blog/2013/06/06/sdlxue-xi-ri-ji-01</id>
    <content type="html"><![CDATA[<p>闲来无事，想玩玩SDL，找来一个介绍SDL的网站，挺不错的，从环境配置到简单的使用。初学者必看！
想获取更多信息，访问<a href="http://lazyfoo.net/SDL_tutorials/index.php">Lazyfoo</a>的博客！
现在开始!
首先是搭环境，我用的环境是ubuntu系统，直接用命令行+VIM编辑器，没有IDE工具，所以这个工作很简单。只是要安装SDL的包就行了。</p>

<pre><code>apt-get install libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev
</code></pre>

<p>装完以后写一个小小的测试程序来测试一下环境有没有配置好。推荐使用C++，但是我比较熟悉C而且也只是玩玩，所以我用的C语言。
代码如下：</p>

<pre><code>
    #include &ltSDL/SDL.h&gt 
    #include &ltunistd.h&gt

    int main(int argc, char **argv)
    {
        SDL_Init( SDL_INIT_EVERYTHING );   //初始化SDL， SDL_INIT_EVERYTHING&sup1表示初始化SDL的所有模块
        SDL_Delay(1000);       //delay， 单位是毫秒
        SDL_Quit();     //退出SDL
        return 0;
    }
</code></pre>


<p>编译的时候直接用的gcc编译就行，记得链上libSDL.so</p>

<pre><code>gcc -o mysdl mysdl.c -lSDL
</code></pre>

<p>编译OK，执行OK的话就表示SDL环境搭建OK！我们就可以开始我们的SDL之旅了。</p>

<p>更多环境的配置，请访问<a href="http://lazyfoo.net/SDL_tutorials/index.php">Lazyfoo</a>的博客!</p>

<pre><code>
    SDL_INIT_EVERYTHING&sup1:
    事件处理子系统，文件I/O子系统和多线程子系统在初始化的时候是默认启动的。
    如果要启用其他的子系统则需要在初始化的时候声明。
    其他模块对应的定义如下：
    1.SDL_INIT_TIMER                时间子系统
    2.SDL_INIT_AUDIO                音频子系统
    3.SDL_INIT_VIDEO                视频子系统
    4.SDL_INIT_JOYSTICK             手柄子系统
    5.SDL_INIT_HAPTIC               触感子系统
    6.SDL_INIT_EVERYTHING           以上所有子系统
    7.SDL_INIT_NOPARACHUTE          不处理致命信号
    如果没有设置成SDL_INIT_NOPARACHUTE模式,则初始化的时候对那些致命信号采用
    默认的处理(如SIGSEGV)。
    如果你想单独初始化各个子系统，则可以先调用SDL_Init(0), 然后使用各个子
    系统的flag作为参数调用SDL_InitSubSystem()。
</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Say Hello]]></title>
    <link href="http://shortyjet-von.github.io/blog/2013/05/30/just-say-hello/"/>
    <updated>2013-05-30T16:24:00+08:00</updated>
    <id>http://shortyjet-von.github.io/blog/2013/05/30/just-say-hello</id>
    <content type="html"><![CDATA[<p>Hello!</p>
]]></content>
  </entry>
  
</feed>
